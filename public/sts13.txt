###############################
####Max Sliding Window ########
###############################

import java.util.ArrayDeque;
import java.util.Deque;

public class MaxSlidingWindow {

    static int[] maxSlidingWindow(int[] nums, int k) {
        if (nums == null || k <= 0) {
            return new int[0];
        }

        int n = nums.length;
        int[] result = new int[n - k + 1];
        Deque<Integer> deque = new ArrayDeque<>();

        for (int i = 0; i < n; i++) {
            // Remove elements outside of the window
            while (!deque.isEmpty() && deque.peek() < i - k + 1) {
                deque.poll();
            }
            // Remove smaller elements in the current window as they won't be the maximum
            while (!deque.isEmpty() && nums[i] >= nums[deque.peekLast()]) {
                deque.pollLast();
            }
            // Add the current index to the deque
            deque.offer(i);
            // Add the maximum element in the current window to the result array
            if (i >= k - 1) {
                result[i - k + 1] = nums[deque.peek()];
            }
        }

        return result;
    }

    public static void main(String[] args) {
        int[] nums = {1, 3, -1, -3, 5, 3, 6, 7};
        int k = 3;
        int[] result = maxSlidingWindow(nums, k);
        System.out.println("Maximum elements in sliding windows of size " + k + ":");
        for (int num : result) {
            System.out.print(num + " ");
        }
    }
}
