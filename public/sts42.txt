####################################
###### Travelling Salesman #########
####################################

import java.util.Arrays;

public class TravellingSalesman {
    public static void main(String[] args) {
        int[][] distances = {
                {0, 10, 15, 20},
                {10, 0, 35, 25},
                {15, 35, 0, 30},
                {20, 25, 30, 0}
        };

        int n = distances.length;
        System.out.println("Minimum cost: " + tsp(distances, n));
    }

    public static int tsp(int[][] distances, int n) {
        int[][] dp = new int[n][1 << n];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return tspHelper(distances, n, 0, 1, dp);
    }

    public static int tspHelper(int[][] distances, int n, int current, int mask, int[][] dp) {
        if (mask == (1 << n) - 1) { // All cities visited
            return distances[current][0];
        }
        if (dp[current][mask] != -1) {
            return dp[current][mask];
        }

        int minCost = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            if ((mask & (1 << i)) == 0) { // City i not visited yet
                int newMask = mask | (1 << i);
                int cost = distances[current][i] + tspHelper(distances, n, i, newMask, dp);
                minCost = Math.min(minCost, cost);
            }
        }
        dp[current][mask] = minCost;
        return minCost;
    }
}
