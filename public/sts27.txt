###################################
##### Topological Sort       #######
###################################

import java.util.*;

public class TopologicalSort {

    static void dfs(List<Integer>[] graph, int vertex, boolean[] visited, Stack<Integer> stack) {
        visited[vertex] = true;

        for (int neighbor : graph[vertex]) {
            if (!visited[neighbor]) {
                dfs(graph, neighbor, visited, stack);
            }
        }

        stack.push(vertex);
    }

    static void topologicalSort(List<Integer>[] graph, int V) {
        boolean[] visited = new boolean[V];
        Stack<Integer> stack = new Stack<>();

        for (int i = 0; i < V; ++i) {
            if (!visited[i]) {
                dfs(graph, i, visited, stack);
            }
        }

        System.out.println("Topological ordering:");
        while (!stack.isEmpty()) {
            System.out.print(stack.pop() + " ");
        }
    }

    public static void main(String[] args) {
        int V = 6; // Number of vertices
        List<Integer>[] graph = new ArrayList[V];
        for (int i = 0; i < V; ++i) {
            graph[i] = new ArrayList<>();
        }

        // Add directed edges
        graph[5].add(2);
        graph[5].add(0);
        graph[4].add(0);
        graph[4].add(1);
        graph[2].add(3);
        graph[3].add(1);

        topologicalSort(graph, V);
    }
}
