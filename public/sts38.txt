######################################
##### Longest Bitonic Subsequence ####
######################################

public class LongestBitonicSubsequence {
    public static void main(String[] args) {
        int[] nums = {1, 11, 2, 10, 4, 5, 2, 1};
        System.out.println("Length of Longest Bitonic Subsequence: " + longestBitonicSubsequence(nums));
    }

    public static int longestBitonicSubsequence(int[] nums) {
        int n = nums.length;
        if (n == 0) {
            return 0;
        }

        // Calculate the longest increasing subsequence (LIS) from left to right
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = 1;
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    lis[i] = Math.max(lis[i], lis[j] + 1);
                }
            }
        }

        // Calculate the longest decreasing subsequence (LDS) from right to left
        int[] lds = new int[n];
        for (int i = n - 1; i >= 0; i--) {
            lds[i] = 1;
            for (int j = n - 1; j > i; j--) {
                if (nums[i] > nums[j]) {
                    lds[i] = Math.max(lds[i], lds[j] + 1);
                }
            }
        }

        // Calculate the length of the longest bitonic subsequence
        int max = 0;
        for (int i = 0; i < n; i++) {
            max = Math.max(max, lis[i] + lds[i] - 1);
        }

        return max;
    }
}
