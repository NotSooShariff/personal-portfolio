#################################
######## Stock Span #############
#################################

import java.util.Stack;

public class StockSpan {

    static int[] calculateSpan(int[] prices) {
        int n = prices.length;
        int[] span = new int[n];
        Stack<Integer> stack = new Stack<>();

        // Push index of first price to stack
        stack.push(0);
        // Span of first day is always 1
        span[0] = 1;

        for (int i = 1; i < n; i++) {
            // Pop elements from stack while the price at stack top is less than or equal to the current price
            while (!stack.isEmpty() && prices[stack.peek()] <= prices[i]) {
                stack.pop();
            }
            // If stack becomes empty, the current price is greater than all previous prices
            if (stack.isEmpty()) {
                span[i] = i + 1;
            } 
            // Else, the span is the difference between current index and the index at stack top
            else {
                span[i] = i - stack.peek();
            }
            // Push current index to stack for future comparisons
            stack.push(i);
        }

        return span;
    }

    public static void main(String[] args) {
        int[] prices = {100, 80, 60, 70, 60, 75, 85};
        int[] span = calculateSpan(prices);
        System.out.println("Stock Span for each day:");
        for (int s : span) {
            System.out.print(s + " ");
        }
    }
}

