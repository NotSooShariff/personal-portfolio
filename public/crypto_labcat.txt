######################################
########## DES Encryption ############
######################################

// Java classes that are mandatory to import for encryption and decryption process
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.AlgorithmParameterSpec;
import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.CipherOutputStream;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import java.util.Base64;

public class DesProgram {
    // creating an instance of the Cipher class for encryption
    private static Cipher encrypt;
    // creating an instance of the Cipher class for decryption
    private static Cipher decrypt;
    // initializing vector
    private static final byte[] initialization_vector = { 22, 33, 11, 44, 55, 99, 66, 77 };

    // main() method
    public static void main(String[] args) {
        // Text to be encrypted and decrypted
        String plainText = "This is a sample plaintext for encryption and decryption.";
        // Print original text
        System.out.println("Original Text: " + plainText);

        try {
            // generating keys by using the KeyGenerator class
            SecretKey secretKey = KeyGenerator.getInstance("DES").generateKey();
            AlgorithmParameterSpec aps = new IvParameterSpec(initialization_vector);

            // setting encryption mode
            encrypt = Cipher.getInstance("DES/CBC/PKCS5Padding");
            encrypt.init(Cipher.ENCRYPT_MODE, secretKey, aps);

            // setting decryption mode
            decrypt = Cipher.getInstance("DES/CBC/PKCS5Padding");
            decrypt.init(Cipher.DECRYPT_MODE, secretKey, aps);

            // Encrypt the plaintext
            byte[] encryptedData = encryptText(plainText);

            // Decrypt the ciphertext
            String decryptedText = decryptText(encryptedData);

            // Prints the encrypted text
            System.out.println("Encrypted Text: " + Base64.getEncoder().encodeToString(encryptedData));

            // Prints the decrypted text
            System.out.println("Decrypted Text: " + decryptedText);
        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException
                | InvalidAlgorithmParameterException | IOException e) {
            // prints the message (if any) related to exceptions
            e.printStackTrace();
        }
    }

    // Method for encryption
    private static byte[] encryptText(String plainText) throws IOException {
        try (ByteArrayOutputStream output = new ByteArrayOutputStream()) {
            try (CipherOutputStream cipherOutputStream = new CipherOutputStream(output, encrypt)) {
                cipherOutputStream.write(plainText.getBytes());
            }
            return output.toByteArray();
        }
    }

    // Method for decryption
    private static String decryptText(byte[] encryptedData) throws IOException {
        try (InputStream input = new ByteArrayInputStream(encryptedData);
                ByteArrayOutputStream output = new ByteArrayOutputStream()) {
            try (CipherInputStream cipherInputStream = new CipherInputStream(input, decrypt)) {
                byte[] buffer = new byte[512];
                int readBytes;
                while ((readBytes = cipherInputStream.read(buffer)) >= 0) {
                    output.write(buffer, 0, readBytes);
                }
            }
            return output.toString();
        }
    }
}

######################################
#### AES Key Generation (S-Box) ######
######################################

public class Main {

    // Rijndael S-box
    private static final byte[] sBox = {
        (byte) 0x63, (byte) 0x7c, (byte) 0x77, (byte) 0x7b, (byte) 0xf2, (byte) 0x6b, (byte) 0x6f, (byte) 0xc5,
        (byte) 0x30, (byte) 0x01, (byte) 0x67, (byte) 0x2b, (byte) 0xfe, (byte) 0xd7, (byte) 0xab, (byte) 0x76,
        (byte) 0xca, (byte) 0x82, (byte) 0xc9, (byte) 0x7d, (byte) 0xfa, (byte) 0x59, (byte) 0x47, (byte) 0xf0,
        (byte) 0xad, (byte) 0xd4, (byte) 0xa2, (byte) 0xaf, (byte) 0x9c, (byte) 0xa4, (byte) 0x72, (byte) 0xc0,
        (byte) 0xb7, (byte) 0xfd, (byte) 0x93, (byte) 0x26, (byte) 0x36, (byte) 0x3f, (byte) 0xf7, (byte) 0xcc,
        (byte) 0x34, (byte) 0xa5, (byte) 0xe5, (byte) 0xf1, (byte) 0x71, (byte) 0xd8, (byte) 0x31, (byte) 0x15,
        (byte) 0x04, (byte) 0xc7, (byte) 0x23, (byte) 0xc3, (byte) 0x18, (byte) 0x96, (byte) 0x05, (byte) 0x9a,
        (byte) 0x07, (byte) 0x12, (byte) 0x80, (byte) 0xe2, (byte) 0xeb, (byte) 0x27, (byte) 0xb2, (byte) 0x75,
        (byte) 0x09, (byte) 0x83, (byte) 0x2c, (byte) 0x1a, (byte) 0x1b, (byte) 0x6e, (byte) 0x5a, (byte) 0xa0,
        (byte) 0x52, (byte) 0x3b, (byte) 0xd6, (byte) 0xb3, (byte) 0x29, (byte) 0xe3, (byte) 0x2f, (byte) 0x84,
        (byte) 0x53, (byte) 0xd1, (byte) 0x00, (byte) 0xed, (byte) 0x20, (byte) 0xfc, (byte) 0xb1, (byte) 0x5b,
        (byte) 0x6a, (byte) 0xcb, (byte) 0xbe, (byte) 0x39, (byte) 0x4a, (byte) 0x4c, (byte) 0x58, (byte) 0xcf,
        (byte) 0xd0, (byte) 0xef, (byte) 0xaa, (byte) 0xfb, (byte) 0x43, (byte) 0x4d, (byte) 0x33, (byte) 0x85,
        (byte) 0x45, (byte) 0xf9, (byte) 0x02, (byte) 0x7f, (byte) 0x50, (byte) 0x3c, (byte) 0x9f, (byte) 0xa8,
        (byte) 0x51, (byte) 0xa3, (byte) 0x40, (byte) 0x8f, (byte) 0x92, (byte) 0x9d, (byte) 0x38, (byte) 0xf5,
        (byte) 0xbc, (byte) 0xb6, (byte) 0xda, (byte) 0x21, (byte) 0x10, (byte) 0xff, (byte) 0xf3, (byte) 0xd2,
        (byte) 0xcd, (byte) 0x0c, (byte) 0x13, (byte) 0xec, (byte) 0x5f, (byte) 0x97, (byte) 0x44, (byte) 0x17,
        (byte) 0xc4, (byte) 0xa7, (byte) 0x7e, (byte) 0x3d, (byte) 0x64, (byte) 0x5d, (byte) 0x19, (byte) 0x73,
        (byte) 0x60, (byte) 0x81, (byte) 0x4f, (byte) 0xdc, (byte) 0x22, (byte) 0x2a, (byte) 0x90, (byte) 0x88,
        (byte) 0x46, (byte) 0xee, (byte) 0xb8, (byte) 0x14, (byte) 0xde, (byte) 0x5e, (byte) 0x0b, (byte) 0xdb,
        (byte) 0xe0, (byte) 0x32, (byte) 0x3a, (byte) 0x0a, (byte) 0x49, (byte) 0x06, (byte) 0x24, (byte) 0x5c,
        (byte) 0xc2, (byte) 0xd3, (byte) 0xac, (byte) 0x62, (byte) 0x91, (byte) 0x95, (byte) 0xe4, (byte) 0x79,
        (byte) 0xe7, (byte) 0xc8, (byte) 0x37, (byte) 0x6d, (byte) 0x8d, (byte) 0xd5, (byte) 0x4e, (byte) 0xa9,
        (byte) 0x6c, (byte) 0x56, (byte) 0xf4, (byte) 0xea, (byte) 0x65, (byte) 0x7a, (byte) 0xae, (byte) 0x08,
        (byte) 0xba, (byte) 0x78, (byte) 0x25, (byte) 0x2e, (byte) 0x1c, (byte) 0xa6, (byte) 0xb4, (byte) 0xc6,
        (byte) 0xe8, (byte) 0xdd, (byte) 0x74, (byte) 0x1f, (byte) 0x4b, (byte) 0xbd, (byte) 0x8b, (byte) 0x8a,
        (byte) 0x70, (byte) 0x3e, (byte) 0xb5, (byte) 0x66, (byte) 0x48, (byte) 0x03, (byte) 0xf6, (byte) 0x0e,
        (byte) 0x61, (byte) 0x35, (byte) 0x57, (byte) 0xb9, (byte) 0x86, (byte) 0xc1, (byte) 0x1d, (byte) 0x9e,
        (byte) 0xe1, (byte) 0xf8, (byte) 0x98, (byte) 0x11, (byte) 0x69, (byte) 0xd9, (byte) 0x8e, (byte) 0x94,
        (byte) 0x9b, (byte) 0x1e, (byte) 0x87, (byte) 0xe9, (byte) 0xce, (byte) 0x55, (byte) 0x28, (byte) 0xdf,
        (byte) 0x8c, (byte) 0xa1, (byte) 0x89, (byte) 0x0d, (byte) 0xbf, (byte) 0xe6, (byte) 0x42, (byte) 0x68,
        (byte) 0x41, (byte) 0x99, (byte) 0x2d, (byte) 0x0f, (byte) 0xb0, (byte) 0x54, (byte) 0xbb, (byte) 0x16
    };

    // AES round constant (used in key schedule)
    private static final byte[] rCon = {
        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, (byte) 0x80, 0x1B, 0x36
    };

    // Perform SubByte operation using the Rijndael S-box
    private static byte subByte(byte value) {
        return sBox[value & 0xFF];
    }

    // Perform RotWord operation (rotate left circularly by one byte)
    private static int rotWord(int value) {
        return (value << 8) | ((value & 0xFF00) >>> 8);
    }

    // Perform SubWord operation (apply SubByte to each byte)
    private static int subWord(int value) {
        int result = 0;
        for (int i = 0; i < 4; i++) {
            int byteValue = (value >>> (i * 8)) & 0xFF;
            byteValue = subByte((byte) byteValue) & 0xFF;
            result |= byteValue << (i * 8);
        }
        return result;
    }

    // Generate next round key from previous round key
    private static int[] nextRoundKey(int[] prevKey, int round) {
        int[] newKey = new int[4];

        // Rotate previous round key (RotWord)
        int rotatedKey = rotWord(prevKey[3]);

        // Substitute bytes (SubWord)
        int substitutedKey = subWord(rotatedKey);

        // XOR with R_CON value for the current round
        int rConValue = (rCon[round - 1] << 24) & 0xFF000000;
        substitutedKey ^= rConValue;

        // XOR with first word of previous round key
        newKey[0] = substitutedKey ^ prevKey[0];

        // XOR with other words of previous round key
        for (int i = 1; i < 4; i++) {
            newKey[i] = newKey[i - 1] ^ prevKey[i];
        }

        return newKey;
    }

    public static void main(String[] args) {
        // Original AES key (128-bit key)
        int[] originalKey = {0x2b7e1516, 0x28aed2a6, 0xabf71588, 0x09cf4f3c};

        // Example: Generate round keys for the first round
        int[][] roundKeys = new int[11][4];
        roundKeys[0] = originalKey;

        // Perform key expansion for one round only
        int round = 1;
        roundKeys[round] = nextRoundKey(roundKeys[round - 1], round);

        // Print round key for one round only
        System.out.println("Round " + round + " Key:");
        for (int i = 0; i < 4; i++) {
            System.out.printf("%08X ", roundKeys[round][i]);
        }
        System.out.println();
    }
}


######################################
########## AES Encryption ############
######################################

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.util.Base64;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
class AESExample {
 /* Private variable declaration */
 private static final String SECRET_KEY = "123456789";
 private static final String SALTVALUE = "abcdefg";
 /* Encryption Method */
 public static String encrypt(String strToEncrypt) {
 try {
 /* Declare a byte array. */
 byte[] iv = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 IvParameterSpec ivspec = new IvParameterSpec(iv);
 /* Create factory for secret keys. */
 SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
 /* PBEKeySpec class implements KeySpec interface. */
 KeySpec spec = new PBEKeySpec(SECRET_KEY.toCharArray(), SALTVALUE.getBytes(), 65536, 256);
 SecretKey tmp = factory.generateSecret(spec);
 SecretKeySpec secretKey = new SecretKeySpec(tmp.getEncoded(), "AES");
 Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
 cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivspec);
 /* Retruns encrypted value. */
 return Base64.getEncoder()
 .encodeToString(cipher.doFinal(strToEncrypt.getBytes(StandardCharsets.UTF_8)));
 } catch (InvalidAlgorithmParameterException | InvalidKeyException | NoSuchAlgorithmException
 | InvalidKeySpecException | BadPaddingException | IllegalBlockSizeException
 | NoSuchPaddingException e) {
 System.out.println("Error occured during encryption: " + e.toString());
 }
 return null;
 }
 /* Decryption Method */
 public static String decrypt(String strToDecrypt) {
 try {
 /* Declare a byte array. */
 byte[] iv = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 IvParameterSpec ivspec = new IvParameterSpec(iv);
 /* Create factory for secret keys. */
 SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
 /* PBEKeySpec class implements KeySpec interface. */
 KeySpec spec = new PBEKeySpec(SECRET_KEY.toCharArray(), SALTVALUE.getBytes(), 65536, 256);
 SecretKey tmp = factory.generateSecret(spec);
 SecretKeySpec secretKey = new SecretKeySpec(tmp.getEncoded(), "AES");
 Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
 cipher.init(Cipher.DECRYPT_MODE, secretKey, ivspec);
 /* Retruns decrypted value. */
 return new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt)));
 } catch (InvalidAlgorithmParameterException | InvalidKeyException | NoSuchAlgorithmException
 | InvalidKeySpecException | BadPaddingException | IllegalBlockSizeException
 | NoSuchPaddingException e) {
 System.out.println("Error occured during decryption: " + e.toString());
 }
 return null;
 }
 /* Driver Code */
 public static void main(String[] args) {
 /* Message to be encrypted. */
 String originalval = "AES Encryption";
 /* Call the encrypt() method and store result of encryption. */
 String encryptedval = encrypt(originalval);
 /* Call the decrypt() method and store result of decryption. */
 String decryptedval = decrypt(encryptedval);
 /*
 * Display the original message, encrypted message and decrypted message on the
 * console.
 */
 System.out.println("Original value: " + originalval);
 System.out.println("Encrypted value: " + encryptedval);
 System.out.println("Decrypted value: " + decryptedval);
 }
}

#####################################
########## Diffie Hellman ###########
#####################################

def main():
    p = int(input("Enter modulus (public): "))
    g = int(input("Enter base (public): "))
    print()
    a = int(input("Enter secret integer for Alice (private): "))
    b = int(input("Enter secret integer for Bob (private): "))
    A = (g**a)%p
    B = (g**b)%p
    print()
    print("Alice sends Bob (public): ", A)
    print("Bob sends Alice (public): ", B)
    sa = (B**a)%p
    sb = (A**b)%p
    print()
    print("Secret Key that Alice has (private): ", sa)
    print("Secret Key that Bob has (private): ", sb)
if _name_ == "_main_":
    main()

######################################
###### Diffie Hellman with MITM ######
######################################

def main():
    p = int(input("Enter modulus (public): "))
    g = int(input("Enter base (public): "))
    print()
    a = int(input("Enter secret integer for Alice (private): "))
    b = int(input("Enter secret integer for Bob (private): "))
    print("Enter secret integers for Eve")
    ea = int(input("For Alice: "))
    eb = int(input("For Bob: "))
    A = (g**a)%p
    B = (g**b)%p
    EA = (g**ea)%p
    EB = (g**eb)%p
    print()
    print("Alice sends Eve (public): ", A)
    print("Eve sends Alice (public): ", EA)
    print()
    print("Bob sends Eve (public): ", B)
    print("Eve sends Bob (public): ", EB)
    sa = (EA**a)%p
    sea = (A**ea)%p
    sb = (EB**b)%p
    seb = (B**eb)%p
    print()
    print("Session Key that Alice has (private): ", sa)
    print("Session Key that Eve has for Alice(private): ", sea)
    print()
    print("Session Key that Bob has (private): ", sb)
    print("Session Key that Eve has for Bob (private): ", seb)
if name == "main":
    main()

######################################
########## RSA Encryption ############
######################################

// Java Program to Implement the RSA Algorithm
import java.math.*;
import java.util.*;
class RSA {
 public static void main(String args[]) {
 int p, q, n, z, d = 0, e, i;
 // The number to be encrypted and decrypted
 int msg = 12;
 double c;
 BigInteger msgback;
 // 1st prime number p
 p = 3;
 // 2nd prime number q
 q = 11;
 n = p * q;
 z = (p - 1) * (q - 1);
 System.out.println("the value of z = " + z);
 for (e = 2; e < z; e++) {
 // e is for public key exponent
 if (gcd(e, z) == 1) {
 break;
 }
 }
 System.out.println("the value of e = " + e);
 for (i = 0; i <= 9; i++) {
 int x = 1 + (i * z);
 // d is for private key exponent
 if (x % e == 0) {
 d = x / e;
 break;
 }
 }
 System.out.println("the value of d = " + d);
 c = (Math.pow(msg, e)) % n;
 System.out.println("Encrypted message is : " + c);
 // converting int value of n to BigInteger
 BigInteger N = BigInteger.valueOf(n);
 // converting float value of c to BigInteger
 BigInteger C = BigDecimal.valueOf(c).toBigInteger();
 msgback = (C.pow(d)).mod(N);
 System.out.println("Decrypted message is : "
 + msgback);
 }
 static int gcd(int e, int z) {
 if (e == 0)
 return z;
 else
 return gcd(z % e, e);
 }
}